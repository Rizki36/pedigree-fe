/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AnimalsIndexImport } from './routes/animals/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const PedigreeIndexLazyImport = createFileRoute('/pedigree/')()
const LoginIndexLazyImport = createFileRoute('/login/')()
const BreedingIndexLazyImport = createFileRoute('/breeding/')()
const AnimalsAnimalIdIndexLazyImport = createFileRoute('/animals/$animalId/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PedigreeIndexLazyRoute = PedigreeIndexLazyImport.update({
  path: '/pedigree/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/pedigree/index.lazy').then((d) => d.Route),
)

const LoginIndexLazyRoute = LoginIndexLazyImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/index.lazy').then((d) => d.Route))

const BreedingIndexLazyRoute = BreedingIndexLazyImport.update({
  path: '/breeding/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/breeding/index.lazy').then((d) => d.Route),
)

const AnimalsIndexRoute = AnimalsIndexImport.update({
  path: '/animals/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/animals/index.lazy').then((d) => d.Route))

const AnimalsAnimalIdIndexLazyRoute = AnimalsAnimalIdIndexLazyImport.update({
  path: '/animals/$animalId/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/animals/$animalId/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/animals/': {
      id: '/animals/'
      path: '/animals'
      fullPath: '/animals'
      preLoaderRoute: typeof AnimalsIndexImport
      parentRoute: typeof rootRoute
    }
    '/breeding/': {
      id: '/breeding/'
      path: '/breeding'
      fullPath: '/breeding'
      preLoaderRoute: typeof BreedingIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/pedigree/': {
      id: '/pedigree/'
      path: '/pedigree'
      fullPath: '/pedigree'
      preLoaderRoute: typeof PedigreeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/animals/$animalId/': {
      id: '/animals/$animalId/'
      path: '/animals/$animalId'
      fullPath: '/animals/$animalId'
      preLoaderRoute: typeof AnimalsAnimalIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/animals': typeof AnimalsIndexRoute
  '/breeding': typeof BreedingIndexLazyRoute
  '/login': typeof LoginIndexLazyRoute
  '/pedigree': typeof PedigreeIndexLazyRoute
  '/animals/$animalId': typeof AnimalsAnimalIdIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/animals': typeof AnimalsIndexRoute
  '/breeding': typeof BreedingIndexLazyRoute
  '/login': typeof LoginIndexLazyRoute
  '/pedigree': typeof PedigreeIndexLazyRoute
  '/animals/$animalId': typeof AnimalsAnimalIdIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/animals/': typeof AnimalsIndexRoute
  '/breeding/': typeof BreedingIndexLazyRoute
  '/login/': typeof LoginIndexLazyRoute
  '/pedigree/': typeof PedigreeIndexLazyRoute
  '/animals/$animalId/': typeof AnimalsAnimalIdIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/animals'
    | '/breeding'
    | '/login'
    | '/pedigree'
    | '/animals/$animalId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/animals'
    | '/breeding'
    | '/login'
    | '/pedigree'
    | '/animals/$animalId'
  id:
    | '__root__'
    | '/'
    | '/animals/'
    | '/breeding/'
    | '/login/'
    | '/pedigree/'
    | '/animals/$animalId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AnimalsIndexRoute: typeof AnimalsIndexRoute
  BreedingIndexLazyRoute: typeof BreedingIndexLazyRoute
  LoginIndexLazyRoute: typeof LoginIndexLazyRoute
  PedigreeIndexLazyRoute: typeof PedigreeIndexLazyRoute
  AnimalsAnimalIdIndexLazyRoute: typeof AnimalsAnimalIdIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AnimalsIndexRoute: AnimalsIndexRoute,
  BreedingIndexLazyRoute: BreedingIndexLazyRoute,
  LoginIndexLazyRoute: LoginIndexLazyRoute,
  PedigreeIndexLazyRoute: PedigreeIndexLazyRoute,
  AnimalsAnimalIdIndexLazyRoute: AnimalsAnimalIdIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/animals/",
        "/breeding/",
        "/login/",
        "/pedigree/",
        "/animals/$animalId/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/animals/": {
      "filePath": "animals/index.tsx"
    },
    "/breeding/": {
      "filePath": "breeding/index.lazy.tsx"
    },
    "/login/": {
      "filePath": "login/index.lazy.tsx"
    },
    "/pedigree/": {
      "filePath": "pedigree/index.lazy.tsx"
    },
    "/animals/$animalId/": {
      "filePath": "animals/$animalId/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
